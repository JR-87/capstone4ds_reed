---
title: "Predicting Survival Probability of NASA Aircraft Engines"
subtitle: "Using Cox Proportional Hazards Model"
author: "Jayme Reed & Brad Paton (Advisor: Dr. Cohen)"
date: last-modified
date-format: long
format:
  revealjs:
    theme: moon
    smaller: true
course: Capstone Projects in Data Science
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
  echo: false
editor: 
  markdown: 
    wrap: 72
---

```{r, warning=FALSE, include=FALSE}
#Load packages
library(tidyverse)
library(gridExtra)
library(grid)
library(survival)
library(survminer)
library(ggpubr)
library(magrittr)
library(ggfortify)
library(knitr)
library(sjPlot)
library(broom)
```

## Cox Proportional Hazards (CPH) Model

What is it?

-   A statistical regression method specializing in modeling
    time-to-event predictions with survival data [@Abeysekera2009]

    -   Survival data has a value for time and an indicator column for
        an event

-   Is a method that can deal with censored data

    -   Censored data is when the information about an individual in a
        study is only known for a certain period of time [@klein2005]

-   Primarily used in the health field but has applications in
    predicting bank failure, the survival probability of machines, and
    insurance likelihood payouts

## Limitations

-   The model assumes that as time goes on, the survival probability
    will approach zero with no survivors [@asghar2024]

-   The proportional hazards assumption can limit the ability to
    correctly predict the effect of a variable [@jiang2024]

-   The covariate selection can become biased and may not accurately
    represent the true data [@wang2025],[@zhang2025]

-   The model cannot provide a specific value for when the event will
    happen, only the probability of when the event might happen

## Mathematical Formulas

-   Concordance Index: $C = \frac{c + \frac{t_x}{2}}{c + d + t_x}$

-   CPH Model Hazard Function:
    $h(t|\mathbf Z) = h_0(t)\text{exp}(\sum\limits_{k=1}^{p} \beta_kZ_k)$

-   Proportional Hazards Ratio:
    $\frac{h(t|\mathbf Z)}{h(t|\mathbf Z*)} = \text{exp}[\sum\limits_{k=1}^{p} \beta_k(Z_k - Z_k^*)]$

-   Cumulative Hazard Function: $H(x) = \int_0^x h(u) du$

-   Survival Probability: $S(t) = e^{-H(t)}$, where $H(t)$ is the above
    cumulative hazard function

## Assumptions

There are four assumptions for CPH:

-   Independence assumption

    -   Assumes that the survival times of observed subjects are
        independent of each other [@nahhas2025]

-   Non-informative Censoring Assumption

    -   Assumes that censoring is non-informative [@nahhas2025]

-   Linearity Assumption

    -   Assumes the relationship between covariates and the outcome is a
        linear relationship [@nahhas2025]

-   Proportional Hazards Assumption

    -   Assumes the ratio of hazards rates for any two subjects are
        constant at all times [@Bustan2018]

## Evaluation and Survival Probability

-   Model accuracy evaluation is done using the concordance index

    -   The concordance index measures the amount of agreement between
        two variables

    -   A value of 1 means all the pairs are correctly ordered while a
        value of 0 means no pairs are correctly ordered

-   Survival probability can be predicted at a specific time $t$

    -   If the probability is $\geq 50$%, it is assumed the event has
        not occurred

    -   If the probability is $< 50$%, it is assumed the event has
        occurred

## Data Structure

The data selected for this project comes from a study on propagation
modeling that NASA completed, specifically focusing on the engine two
testing and training datasets [@saxena2008].

-   Each engine in the NASA data has an unknown amount of wear,
    manufacturing variation, and sensor noise

-   There are three operation setting fields and twenty-one sensor
    measurement fields

-   A column indicating status was added to both the testing and
    training datasets with 0 indicating the machine has not failed and 1
    indicating the machine has failed

```{r}
testurl <- 'https://raw.githubusercontent.com/JR-87/capstone4ds_reed/refs/heads/main/test_FD002.txt'

test <- read.delim(testurl, header = TRUE, sep = '') %>%
  mutate(status = 0,
         id = id + 260)

trainurl <- 'https://raw.githubusercontent.com/JR-87/capstone4ds_reed/refs/heads/main/train_FD002.txt'

train <- read.delim(trainurl, header = TRUE, sep = '') %>%
  group_by(id) %>%
  mutate(status = if_else(row_number() == n(), 1, 0)) %>%
  ungroup() 

data_all <- rbind(train, test) 

train_grouped <- train %>% 
  group_by(id) %>%
  slice_max(time)

data_grouped <- data_all %>%
  group_by(id) %>%
  slice_max(time) 

temp <- data_grouped %>% select(id, time, status, os1, os2, os3, sm1, sm2, sm3)

kable(head(temp, n = 3), format = "markdown", caption = 'NASA Aircraft Engine Data')
```

## Exploration

-   519 engines in the combined data

    -   260 engines in training data

    -   259 engines in testing data

```{r}
summarymetrics <- data.frame(c("Minimum", "Median", "Mean", "Standard Deviation", "Maximum"),
                             c(min(train_grouped$time), 
                               median(train_grouped$time),
                               mean(train_grouped$time),
                               sd(train_grouped$time),
                               max(train_grouped$time)))

colnames(summarymetrics) <- c("Metric", "Value")
summarymetrics$Value <- round(summarymetrics$Value, digits = 2)
kable(summarymetrics, format = "markdown", align = "c", caption = "Summary Metrics")
```

## Visualization

::: panel-tabset
#### Histogram/Boxplot

```{r}
#| fig-align: center
Histogram <- ggplot(data = train_grouped,
       aes(x = time)) +
  geom_histogram(binwidth = 5,
                 fill = "grey")+
  labs(x = "Survival Time (Iterations)",
       y = "Frequency")+
  theme_bw()

box <- ggplot(data = train_grouped,
                  aes(y = time))+
  geom_boxplot(fill = "gray",
               color = "black")+
  ylab("Time (Iterations)")+
  theme_bw()


grid.arrange(Histogram,box,ncol = 2, top = "Distribution of Engine Longevity in Training Data")
```

#### Survival Curve

```{r}
#| fig-align: center
t <- as.matrix(train_grouped[, "time"])
s <- as.matrix(train_grouped[, "status"])

km_fit <- survfit(Surv(t, s) ~ 1)

autoplot(km_fit) + theme_bw() + labs(y = "Survival Probability (%)", x = 'Time (Iterations)')
```
:::

## Creating CPH Model

-   After an analysis of the covariates provided with the data, we
    determined that sm16 and sm19 should not be included in the model

    -   sm16 produces an infinite coefficient when taking the $log$

    -   sm19 is linearly dependent on another covariate

$$
\begin{split}
h(t) = h_0(t)\text{exp}(&-3.97\text{ os1}+26.06\text{ os2}+121.38\text{ os3}+30.47\text{ sm1} \\ &+0.06\text{ sm2}+0.04\text{ sm3}+0.04\text{ sm4} + 48.62\text{ sm5}\\ &-39.93\text{ sm6}-0.10\text{ sm7}+2.26\text{ sm8}-0.03\text{ sm9} \\ &+15.22\text{ sm10} +0.43\text{ sm11}+0.01\text{ sm12}-1.38\text{ sm13}\\ &+0.02\text{ sm14}+8.75\text{ sm15}+0.11\text{ sm17} -14.86\text{ sm18} \\ &-1.02\text{ sm20} -0.34\text{ sm21})
\end{split}
$$

```{r}
surv_object <- Surv(data_grouped$time, data_grouped$status)

cox1.1 <- coxph(data = data_grouped, surv_object ~ os1 + os2 + os3 + sm1 + sm2 + sm3 + sm4 + sm5 + sm6 + sm7 + sm8 + sm9 + sm10 + sm11 + sm12 + sm13 + sm14 + sm15 + sm17 + sm18 + sm20 + sm21)




```

## CPH Model Forest Plot

```{r}
#| fig-align: center
cox1.1 <- coxph(data = data_grouped, surv_object ~ os1 + os2 + os3 + sm1 + sm2 + sm3 + sm4 + sm5 + sm6 + sm7 + sm8 + sm9 + sm10 + sm11 + sm12 + sm13 + sm14 + sm15 + sm17 + sm18 + sm20 + sm21)

ci <- cox1.1$concordance[6]

plot_model(cox1.1,
           dot.size = 2,
           line.size = 1,
           colors = "red")+
  theme_bw()+
  labs(title = "Estimated Effects of Covariates on Hazard Ratios",
       y = "Estimated Effect on Hazard Ratio",
       x = "Covariates")
```

## Checking Assumptions {.scrollable}

::: panel-tabset
#### Independence

-   This assumption is met as the survival times for each individual
    engine in the data is independent of each other

#### Non-informative Censoring

-   This assumption is met as knowing there is censored data does not
    provide any new information about the survival probability

#### Linearity Assumption

-   This assumption is tested by looking at the Martingale residuals
    (Martingale Residuals = Observed Events - Expected Events) and
    determining if there is a slope of zero

```{r}
martingale <- resid(cox1.1, type = "martingale")

par(mfrow = c(4,6),
      mar = c(2,2,4,1))

plot(data_grouped$os1, martingale, main = "Martingale: os1")
abline(h = 0, col = "red")

plot(data_grouped$os2, martingale, main = "Martingale: os2")
abline(h = 0, col = "red")

plot(data_grouped$os3, martingale, main = "Martingale: os3")
abline(h = 0, col = "red")

plot(data_grouped$sm1, martingale, main = "Martingale: sm1")
abline(h = 0, col = "red")

plot(data_grouped$sm2, martingale, main = "Martingale: sm2")
abline(h = 0, col = "red")

plot(data_grouped$sm3, martingale, main = "Martingale: sm3")
abline(h = 0, col = "red")

plot(data_grouped$sm4, martingale, main = "Martingale: sm4")
abline(h = 0, col = "red")

plot(data_grouped$sm5, martingale, main = "Martingale: sm5")
abline(h = 0, col = "red")

plot(data_grouped$sm6, martingale, main = "Martingale: sm6")
abline(h = 0, col = "red")

plot(data_grouped$sm7, martingale, main = "Martingale: sm7")
abline(h = 0, col = "red")

plot(data_grouped$sm8, martingale, main = "Martingale: sm8")
abline(h = 0, col = "red")

plot(data_grouped$sm9, martingale, main = "Martingale: sm9")
abline(h = 0, col = "red")

plot(data_grouped$sm10, martingale, main = "Martingale: sm10")
abline(h = 0, col = "red")

plot(data_grouped$sm11, martingale, main = "Martingale: sm11")
abline(h = 0, col = "red")

plot(data_grouped$sm12, martingale, main = "Martingale: sm12")
abline(h = 0, col = "red")

plot(data_grouped$sm13, martingale, main = "Martingale: sm13")
abline(h = 0, col = "red")

plot(data_grouped$sm14, martingale, main = "Martingale: sm14")
abline(h = 0, col = "red")

plot(data_grouped$sm15, martingale, main = "Martingale: sm15")
abline(h = 0, col = "red")

plot(data_grouped$sm17, martingale, main = "Martingale: sm17")
abline(h = 0, col = "red")

plot(data_grouped$sm18, martingale, main = "Martingale: sm18")
abline(h = 0, col = "red")

plot(data_grouped$sm20, martingale, main = "Martingale: sm20")
abline(h = 0, col = "red")

plot(data_grouped$sm21, martingale, main = "Martingale: sm21")
abline(h = 0, col = "red")
```

#### Proportional Hazards

-   This assumption is tested by looking at the scaled Schoenfeld
    partial residuals (the value of the covariate - the expected value
    of the covariate at the time of failure) and examining the p-value

```{r}
cph_ph <- cox.zph(cox1.1) %>%
  pluck("table") %>%
  as.data.frame() %>%
  tibble::rownames_to_column("variable") %>%
  as_tibble()
temp <- cph_ph %>% filter(variable %in% c("os1", "os2", "sm1", "sm2", "GLOBAL"))
kable(temp, format = "markdown")

create_ph_plots <- function(coxmodel, row, col){
  # Function takes argument that is a cox model from coxph()
  
  phresults <- cox.zph(coxmodel)

  # Define dimensions of visual
  par(mfrow = c(row, col),
      mar = c(2,2,4,1))


  # Loop through each covariate creating a plot and adding it to the phplot list
  for (i in 1:(length(phresults$table[,1])-1)){
    phplots <- list()
    phplots[i] <- plot(phresults[i], # Create plot for each iteration
                       main = rownames(phresults$table)[i]) # Title of each plot is the rowname from coxmodel$table
  
  }
  mtext("Schoenfeld Residuals vs. Time for Covariates", side = 3, line = -1.5, outer = TRUE, cex = 1) # Title for Visual
  par(mfrow = c(1,1)) # Reset plotting area
}

create_ph_plots(cox1.1, 3, 5)

```
:::

## Model Results {.scrollable}

::: panel-tabset
#### Evaluation

-   The CPH model was determined to be a valid model and has a
    concordance index of `{r} ci`

#### Calculations

-   Using the model, we can generate the coefficients and calculate the
    hazard rate, the cumulative hazard value, and the survival
    probability

```{r}
#| fig-align: center
data_grouped_reduced <- data_grouped %>% select(id, time, os1, os2, os3, sm1, sm2, sm3, sm4, sm5, sm6, sm7, sm8, sm9, sm10, sm11, sm12, sm13, sm14, sm15, sm17, sm18, sm20, sm21, status)


data_grouped_reduced$HazardRate <- predict(cox1.1,
        newdata = data_grouped_reduced,
        type = "risk")

data_grouped_reduced$SurvivalProbability <- predict(cox1.1, type = "survival", newdata = data_grouped_reduced)

print_data <- data_grouped_reduced %>% select(id, time, status, HazardRate, SurvivalProbability)

kable(head(print_data, n = 5), format = "markdown")

sf <- survfit(cox1.1)

ggsurvplot(fit = sf,
           data = data_grouped_reduced, risk.table = TRUE, fun = "cumhaz")$plot +
  ggtitle('Cumulative Hazard Over Time')

survtimes <- data.frame(Percent = c("100% Survival", "75% Survival,", "50% Survival", "25% Survival", "10% Survival"),
                        Time = c(sf$time[sf$lower < 1][1], 
                                    sf$time[sf$lower < .75][1], 
                                    sf$time[sf$lower < .5][1], 
                                    sf$time[sf$lower < .25][1], 
                                    sf$time[sf$lower < .1][1]))

ggsurvplot(fit = sf, data = data_grouped_reduced)$plot +
  ggtitle('Survival Probability Over Time')

```
:::

## Conclusion

-   Based on the model, NASA should not use their engines after 128
    iterations have passed

```{r}
kable(survtimes, format = "markdown")
```

## References
